function simulateNPCdata (nCluster, diameter, ringDistance, cornerSigma, nPointPerCorner)
    

    numRingPerCluster = 2;
    numCornerPerRing = 8;
    cornerAngleShift = 22.5;

    

    xrot = 30 * rand;
    yrot = 30 * rand;
    Rx = [1, 0, 0; 0, cosd(xrot), sind(xrot); 0, -sind(xrot), cosd(xrot)];
    Ry = [cosd(yrot), 0, -sind(yrot); 0, 1, 0; sind(yrot), 0, cosd(yrot)];

    %loc_all = zeros(nCluster * numRingPerCluster * numCornerPerRing * nPointPerCorner, 3);
    loc_all = [];
    


    % calculate the center coordinates of the NPC subunits, relative to the NPC center
    cornerCenters = zeros(numCornerPerRing * numRingPerCluster, 3);
    angleIncrement = 360 / numCornerPerRing;
    for n = 1 : numCornerPerRing
        angleRad = deg2rad(angleIncrement * (n - 1) + cornerAngleShift);
        cornerCenters(n, :) = [diameter / 2 * cos(angleRad), diameter / 2 * sin(angleRad), -ringDistance/2];
        cornerCenters(n + numCornerPerRing, :) = ...
            [diameter / 2 * cos(angleRad), diameter / 2 * sin(angleRad), ringDistance/2];
    end
    

    % generate the NPC cluster centers, in a FOV of 1000 x 1000 x 200 nm volume
    xyz_center = 1e3 * rand(nCluster, 3);
    xyz_center(:, 3) = xyz_center(:, 3) / 5;
    
    
    for i = 1 : nCluster
        pos = xyz_center(i, :);
        %cornerCenter_i = cornerCenters + pos;
        
        loc_cluster = [];
        for m = 1 : size(cornerCenters, 1)
            locs = generateGaussianPoints(cornerCenters(m, :), clusterSigma/2, numPoints);
            loc_cluster = [loc_cluster; locs]; %#ok<AGROW>
        end
        
        zrot = 45* rand;
        Rz = [cosd(zrot), sind(zrot), 0; -sind(zrot), cosd(zrot), 0; 0, 0, 1];
        
        loc_rot = ( Rz* (Ry* (Rx* loc_cluster') ) )';

        loc_all = [loc_all, loc_cluster];

    end


    % Plot point cloud
    loc_cluster = [];
    for m = 1:size(cornerCenters, 1)
        locs = generateGaussianPoints(cornerCenters(m, :), cornerSigma/2, nPointPerCorner);
        loc_cluster = [loc_cluster; locs]; %#ok<AGROW>
    end



    NPCpointCloud = pointCloud(loc_cluster(:,1:3), 'Intensity', 1e2*loc_cluster(:,4));








    for i = 1 : nCluster
        


        for n = 1 : numSubunitPerRing
            angleRad = deg2rad(angleIncrement * (n - 1) + 22.5);
            cornerCenters(n, :) = [diameter / 2 * cos(angleRad), diameter / 2 * sin(angleRad), -interRingDistance/2];
            cornerCenters(n + numSubunitPerRing, :) = ...
                [diameter / 2 * cos(angleRad), diameter / 2 * sin(angleRad), interRingDistance/2];
        end

        % Plot point cloud
        loc_cluster = [];
        for m = 1:size(cornerCenters, 1)
            locs = generateGaussianPoints(cornerCenters(m, :), clusterSigma/2, numPoints);
            loc_cluster = [loc_cluster; locs]; %#ok<AGROW>
        end
        NPCpointCloud = pointCloud(loc_cluster(:,1:3), 'Intensity', 1e2*loc_cluster(:,4));





        xyz_cluster = 


    end


    zrot = 37;
    Rz = [cosd(zrot), sind(zrot), 0; -sind(zrot), cosd(zrot), 0; 0, 0, 1];
    xyz_rot = ( Rz*  bead_sim_npc')';



end